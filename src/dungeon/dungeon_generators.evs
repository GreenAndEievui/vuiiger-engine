include "src/include/script.evs";
#asm
	include "defines.inc"
	include "dungeon.inc"
#end

script xGenerateHallsOrClearing {
	if rand() & 1 {
		farjmp(xGenerateClearing);
	} else {
		farjmp(xGenerateHalls);
	}
}

script xGenerateScraper {
	u8 x = 32;
	u8 y = 32;

	repeat 255 {
		step_direction(rand() & 3, x, y);
		map_put_tile(x, y, TILE_CLEAR);
	}

	map_put_tile(x, y, TILE_EXIT);
}

script xGenerateDebug {
	u8 x;
	u8 y;

	for x = 1; x != 63; x += 1; {
		for y = 1; y != 61; y += 1; {
			map_put_tile(x, y, TILE_CLEAR);
		}
	}

	repeat 255 {
		x = rand() & 63;
		y = rand() & 63;
		if map_3x3_is_clear(x, y) {
			x += 1;
			y += 1;
			map_put_tile(x, y, TILE_WALL);
		}
	}
}

script xGenerateLattice {
	u8 doubleWideIndex = rand() & 3;
	u8 doubleWideChanceMask;
	if doubleWideIndex == 0 {
		doubleWideChanceMask = 0;
	} else if doubleWideIndex == 1 {
		doubleWideChanceMask = 3;
	} else if doubleWideIndex == 2 {
		doubleWideChanceMask = 7;
	} else {
		doubleWideChanceMask = 255;
	}

	u8 x = 32;
	u8 y = 32;
	u8 direction = rand() & 3;
	u8 doubleWide = (rand() & doubleWideChanceMask) == 0;

	repeat 64 {
		repeat (rand() & 7) + 4 {
			map_put_tile(x, y, TILE_CLEAR);
			if doubleWide {
				u8 oldX = x;
				u8 oldY = y;
				step_direction((direction + 1) & 3, x, y);
				map_put_tile(x, y, TILE_CLEAR);
				x = oldX;
				y = oldY;
			}
			step_direction(direction, x, y);
		}

		direction += (rand() & 2) - 1;
		direction &= 3;
	}

	u8 tile;
	do {
		x = rand() & 63;
		y = rand() & 63;
		tile = map_get_tile(x, y);
	} while tile != TILE_CLEAR;

	map_put_tile(x, y, TILE_EXIT);
}

script xGenerateHalls {
	u8 doubleWideIndex = rand() & 3;
	u8 doubleWideChanceMask;
	if doubleWideIndex == 0 {
		doubleWideChanceMask = 0;
	} else if doubleWideIndex == 1 {
		doubleWideChanceMask = 3;
	} else if doubleWideIndex == 2 {
		doubleWideChanceMask = 7;
	} else {
		doubleWideChanceMask = 255;
	}

	u8 direction = rand() & 3;

	u8 width = (rand() & 3) + 4;
	u8 height = (rand() & 3) + 4;

	u8 x = 32 - (rand() & 3);
	u8 y = 32 - (rand() & 3);
	
	repeat height {
		repeat width {
			map_put_tile(x, y, TILE_CLEAR);
			x += 1;
		}
		x -= width;
		y += 1;
	}

	// Generate one item in the starting room.
	// This will be the last tile to be placed.
	u8 itemX = x + (rand() & 3);
	u8 itemY = y - (rand() & 3) - 1;

	repeat 9 {
		u8 doubleWide = (rand() & doubleWideChanceMask) == 0;
		repeat (rand() & 1) + 2 {
			repeat (rand() & 7) + 4 {
				map_put_tile(x, y, TILE_CLEAR);
				if doubleWide {
					u8 oldX = x;
					u8 oldY = y;
					step_direction((direction + 1) & 3, x, y);
					map_put_tile(x, y, TILE_CLEAR);
					x = oldX;
					y = oldY;
				}
				step_direction(direction, x, y);
			}

			direction += (rand() & 2) - 1;
			direction &= 3;
		}

		u8 old_x = x;
		u8 old_y = y;

		width = (rand() & 3) + 3;
		height = (rand() & 3) + 3;
		
		repeat height {
			repeat width {
				map_put_tile(x, y, TILE_CLEAR);
				x += 1;
			}
			x -= width;
			y += 1;
		}

		x = old_x;
		y = old_y;

		if direction == UP {
			y -= 1;
		} else if direction == LEFT {
			x += width;
		} else if direction == DOWN {
			x += width - 1;
			y += height;
		} else if direction == RIGHT {
			x -= 1;
			y += height - 1;
		}
	}

	width = 3;
	height = 3;
	x -= 1;
	y -= 1;

	repeat height {
		repeat width {
			map_put_tile(x, y, TILE_CLEAR);
			x += 1;
		}
		x -= width;
		y += 1;
	}
	x += 1;
	y -= 2;
	map_put_tile(x, y, TILE_EXIT);

	map_put_tile(itemX, itemY, (rand() & 1) + TILE_ITEM0);

	repeat 255 {
		x = rand() & 63;
		y = rand() & 63;
		if map_3x3_is_clear(x, y) {
			x += 1;
			y += 1;
			map_put_tile(x, y, TILE_WALL);
		}
	}
}

script xGenerateClearing {
	// This is reused grotto code without the item-rich branches
	u8 grotto_width_half = rand_range(3, 6);
	u8 grotto_height_half = rand_range(3, 6);

	u8 grotto_left_bound = 32 - grotto_width_half;
	u8 grotto_right_bound = 32 + grotto_width_half;
	u8 grotto_upper_bound = 33 - (grotto_height_half + grotto_height_half);
	u8 grotto_lower_bound = 33;

	// Create a horizontal "hash".
	for u8 y = grotto_upper_bound; y < grotto_lower_bound; y += 1; {
		u8 x = grotto_left_bound - rand_range(0, 4);
		u8 x_end = grotto_right_bound + rand_range(0, 4);
		for x; x < x_end; x += 1; {
			map_put_tile(x, y, TILE_CLEAR);
		}
	}

	// Overlap a verticle "hash".
	// This does a lot of rudundant work, but is necessary for the messy look.
	// TODO: For some reason these variables have to have different names?
	// This is *totally* some evscript bug, but I'm not sure what's causing it.
	// Fix this before release please.
	for u8 x2 = grotto_left_bound; x2 < grotto_right_bound; x2 += 1; {
		// give some variance to each strip; this makes the grotto look "hashy".
		// This should actually be (32 - grotto_height_half + rand_range(-2, 2)),
		// but rand_range only handles unsigned values.
		u8 y2 = grotto_upper_bound - rand_range(0, 4);
		u8 y_end = grotto_lower_bound + rand_range(0, 4);
		for y2; y2 < y_end; y2 += 1; {
			map_put_tile(x2, y2, TILE_CLEAR);
		}
	}

	map_put_tile(
		rand_range(grotto_left_bound, grotto_right_bound),
		grotto_upper_bound,
		TILE_EXIT,
	);
}

script xGenerateGrotto {
	u8 grotto_width_half = rand_range(3, 6);
	u8 grotto_height_half = rand_range(3, 6);

	u8 grotto_left_bound = 32 - grotto_width_half;
	u8 grotto_right_bound = 32 + grotto_width_half;
	u8 grotto_upper_bound = 33 - (grotto_height_half + grotto_height_half);
	u8 grotto_lower_bound = 33;

	// Create a horizontal "hash".
	for u8 y = grotto_upper_bound; y < grotto_lower_bound; y += 1; {
		u8 x = grotto_left_bound - rand_range(0, 4);
		u8 x_end = grotto_right_bound + rand_range(0, 4);
		for x; x < x_end; x += 1; {
			map_put_tile(x, y, TILE_CLEAR);
		}
	}

	// Overlap a verticle "hash".
	// This does a lot of rudundant work, but is necessary for the messy look.
	// TODO: For some reason these variables have to have different names?
	// This is *totally* some evscript bug, but I'm not sure what's causing it.
	// Fix this before release please.
	for u8 x2 = grotto_left_bound; x2 < grotto_right_bound; x2 += 1; {
		// give some variance to each strip; this makes the grotto look "hashy".
		// This should actually be (32 - grotto_height_half + rand_range(-2, 2)),
		// but rand_range only handles unsigned values.
		u8 y2 = grotto_upper_bound - rand_range(0, 4);
		u8 y_end = grotto_lower_bound + rand_range(0, 4);
		for y2; y2 < y_end; y2 += 1; {
			map_put_tile(x2, y2, TILE_CLEAR);
		}
	}

	// Create 2 item-rich branches.
	for u8 direction = 0; direction < 2; direction += 1; {

		u8 x;
		// TODO: another evscript bug, probably related to above?
		// The following line isn't needed since it's leaking out of the first for loop.
		// u8 y;

		if direction == 0 {
			x = grotto_left_bound;
		} else {
			x = grotto_right_bound;
		}

		y = rand_range(grotto_upper_bound, grotto_lower_bound);

		u8 place_item_in = rand_range(16, 32);

		repeat rand_range(64, 128) {
			u8 step_dir = rand_range(0, 2);

			// direction == 0 represents leftwards movement.
			// We want these funky branches to move outwards,
			// so we restrict one direction.
			if step_dir == RIGHT {
				if direction == 0 {
					step_dir = LEFT;
				}
			}

			step_direction(step_dir, x, y);

			if place_item_in == 0 {
				// Unlike normal item gen, this is unweighted!
				// Grottos are more likely to have rare items in them.
				map_put_tile(x, y, TILE_ITEM0 + rand_range(0, 3));
				place_item_in = rand_range(16, 32);
			} else {
				map_put_tile(x, y, TILE_CLEAR);
			}

			place_item_in -= 1;
		}
	}

	map_put_tile(
		rand_range(grotto_left_bound, grotto_right_bound),
		grotto_upper_bound,
		TILE_EXIT,
	);
}

script xGenerateItems {
	u8 x;
	u8 y;
	u8 tile;
	do {
		x = rand() & 63;
		y = rand() & 63;
		tile = map_get_tile(x, y);
	} while tile != TILE_CLEAR;

	// The items are given a weight in the following order:
	// ITEM0 - 6/16, 37.50% chance
	// ITEM1 - 6/16, 37.50% chance
	// ITEM2 - 3/16, 18.75% chance
	// ITEM3 - 1/16,  6.25% chance

	// Clamp the random number to (0, 15) and choose an item.
	u8 item_id = rand() & 15;

	if item_id < 6 { map_put_tile(x, y, TILE_ITEM0); }
	else if item_id < 12 { map_put_tile(x, y, TILE_ITEM1); }
	else if item_id < 15 { map_put_tile(x, y, TILE_ITEM2); }
	else { map_put_tile(x, y, TILE_ITEM3); }
}
